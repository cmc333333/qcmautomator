main:
  params: [args]
  steps:
    - init:
        assign:
          - path_or_url: "/users/cmc333333/events?per_page=10"
    - fetch_high_water_mark:
        call: fetch_high_water_mark
        result: high_water_mark
    - fetch_one_page:
        call: github_api
        args:
          path_or_url: ${path_or_url}
        result: result
    - log_results:
        for:
          value: event
          in: ${result.body}
          steps:
            - check_if_past_high_water_mark:
                switch:
                  - condition: ${int(event.id) <= high_water_mark}
                    assign:
                      - result.headers.Link: ""
                    next: break
            - log_event:
                call: sys.log
                args:
                  json:
                    github_event_v1: ${normalize_event(event)}
    - check_if_done:
        switch:
          - condition: ${parse_next_link(result.headers.Link) != ""}
            assign:
              - path_or_url: ${parse_next_link(result.headers.Link)}
            next: fetch_one_page

fetch_high_water_mark:
  steps:
    - run_query:
        call: googleapis.bigquery.v2.jobs.query
        args:
          projectId: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
          body:
            query: |
              SELECT id FROM `github.latest_id`
            useLegacySql: false
        result: query_result
    - return:
        return: ${int(default(query_result.rows[0].f[0].v, "0"))}

github_api:
  params: [path_or_url, body: null, query: null, method: GET]
  steps:
    - init:
        assign:
          - url: ${if(text.substring(path_or_url, 0, 1) == "/", "https://api.github.com" + path_or_url, path_or_url)}
    - hit:
        call: http.request
        args:
          body: ${body}
          headers:
            Authorization: ${"Bearer " + googleapis.secretmanager.v1.projects.secrets.versions.accessString("github_token")}
          method: ${method}
          query: ${query}
          url: ${url}
        result: result
    - return:
        return: ${result}

parse_next_link:
  params: [next_header]
  steps:
    - find_matches:
        assign:
          - matches: ${text.find_all_regex(next_header, "<[^>]+>; rel=\"next\"")}
    - branch:
        switch:
          - condition: ${len(matches) > 0}
            return: ${text.replace_all_regex(matches[0].match, "^.*<|>.*$", "")}
          - condition: true
            return: ""

normalize_reactions:
  params: [reactions]
  steps:
    - init:
        assign:
          - result: {}
    - populate:
        for:
          value: key
          in: ${keys(reactions)}
          steps:
            - field_name_logic:
                switch:
                  - condition: ${key == "+1"}
                    assign:
                      - result.plus_1: ${reactions[key]}
                  - condition: ${key == "-1"}
                    assign:
                      - result.minus_1: ${reactions[key]}
                  - condition: true
                    assign:
                      - result[key]: ${reactions[key]}
    - return:
        return: ${result}

normalize_event:
  params: [event]
  steps:
    - check_comment:
        switch:
          - condition: ${map.get(event, ["payload", "comment", "reactions"]) != null}
            steps:
              - replace_comment:
                  assign:
                    - event.payload.comment.reactions: ${normalize_reactions(event.payload.comment.reactions)}
    - check_issue:
        switch:
          - condition: ${map.get(event, ["payload", "issue", "reactions"]) != null}
            steps:
              - replace_issue:
                  assign:
                    - event.payload.issue.reactions: ${normalize_reactions(event.payload.issue.reactions)}
    - return:
        return: ${event}
